// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  MENTOR
  MENTEE
  ADMIN
}

enum EducationLevel {
  HIGH_SCHOOL
  BACHELOR
  MASTER
  PHD
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum DocumentType {
  DEGREE
  TRANSCRIPT
  CERTIFICATE
  STUDENT_ID
}

enum MeetupRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  DISPUTED
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  bio                   String?
  role                  UserRole               @default(MENTEE)
  accounts              Account[]
  posts                 Post[]
  kudos                 Kudo[]
  comments              Comment[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  education             Education?

  // Relationship with the meetup requests where the user is a mentee
  meetupRequestsAsMentee MeetupRequest[] @relation("MenteeRequests")

  // Relationship with the meetup requests where the user is a mentor
  meetupRequestsAsMentor MeetupRequest[] @relation("MentorRequests")
  Message                Message[]
  Conversation           Conversation[]  @relation("user_one")
  Conversation2          Conversation[]  @relation("user_two")
  Subscription           Subscription[]
  stripeInfo             UserStripeInfo?
}

model Education {
  id                    String                 @id @default(cuid())
  userId                String
  institution           String
  country               String
  level                 EducationLevel
  major                 String
  startYear             Int
  endYear               Int
  isVerified            Boolean                @default(false)
  educationVerification EducationVerification?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model EducationVerification {
  id           String             @id @default(cuid())
  educationId  String
  documentType DocumentType
  documentUrl  String
  status       VerificationStatus @default(PENDING)
  closedAt     DateTime?
  remarks      String?

  education Education @relation(fields: [educationId], references: [id], onDelete: Cascade)

  @@unique([educationId])
}

model Post {
  id        String    @id @default(cuid())
  userId    String
  content   String
  imageUrl  String?
  kudos     Kudo[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Kudo {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model MeetupRequest {
  id                String              @id @default(cuid())
  menteeId          String
  mentorId          String
  dateTime          String
  durationInMinutes Int
  amount            Int
  message           String?
  status            MeetupRequestStatus @default(PENDING)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  order             Order?

  // Relationship with the user who is a mentee
  mentee User @relation("MenteeRequests", fields: [menteeId], references: [id])

  // Relationship with the user who is a mentor
  mentor User @relation("MentorRequests", fields: [mentorId], references: [id])

  @@unique([menteeId, mentorId])
}

model Order {
  id                String               @id @default(cuid())
  meetupRequestId   String            @unique
  status            OrderStatus       @default(PENDING)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  meetupRequest  MeetupRequest      @relation(fields: [meetupRequestId], references: [id], onDelete: Cascade)
}

model Conversation {
  id          String    @id @default(cuid())
  lastMessage String
  status      Boolean   @default(false)
  user_oneId  String
  user_one    User      @relation("user_one", fields: [user_oneId], references: [id])
  user_twoId  String
  user_two    User      @relation("user_two", fields: [user_twoId], references: [id])
  messages    Message[]
}

model Message {
  id             String       @id @default(cuid())
  content        String
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  createdAt      DateTime     @default(now())
}

// * Used For NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Subscription {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  plan      String
  status    String   @default("active")
  meetings  Int?     @default(0)
  stripeId  String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model UserStripeInfo {
  id        String   @id @default(cuid())
  userId    String   @unique
  stripeId  String?
  amount    Float?   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// * Till Here
