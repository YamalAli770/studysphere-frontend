// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  MENTOR
  MENTEE
  ADMIN
}

enum EducationLevel {
  HIGH_SCHOOL
  BACHELOR
  MASTER
  PHD
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum DocumentType {
  DEGREE
  TRANSCRIPT
  CERTIFICATE
  STUDENT_ID
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  bio                String?
  role               UserRole  @default(MENTEE)
  accounts           Account[]
  posts Post[]
  kudos Kudo[]
  comments Comment[]
  isTwoFactorEnabled Boolean   @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  education Education?
}

model Education {
  id          String   @id @default(cuid())
  userId      String
  institution String
  country     String
  level      EducationLevel
  major       String
  startYear   Int
  endYear     Int
  isVerified  Boolean  @default(false)
  educationVerification EducationVerification?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model EducationVerification {
  id String @id @default(cuid())
  educationId String
  documentType DocumentType
  documentUrl String
  status VerificationStatus @default(PENDING)
  closedAt DateTime?
  remarks String?

  education Education @relation(fields: [educationId], references: [id], onDelete: Cascade)

  @@unique([educationId])
}

model Post {
  id String @id @default(cuid())
  userId String
  content String
  imageUrl String?
  kudos Kudo[]
  comments Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Kudo {
  id String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id String @id @default(cuid())
  userId String
  postId String
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// * Used For NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String   @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// * Till Here